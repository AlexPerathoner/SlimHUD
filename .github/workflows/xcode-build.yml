name: Build and Analyze
on:
  push:
    branches: ["master", "develop"]
  pull_request:
    branches: ["master", "develop"]

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  analyze:
    runs-on: macos-latest
    steps:
      - name: Adding markdown
        run: echo '### Hello world! ðŸš€' >> $GITHUB_STEP_SUMMARY
      - name: set variable
        run: echo "UNITTESTCOVERAGE=$(cat $GITHUB_STEP_SUMMARY)" >> $GITHUB_ENV
      # - uses: actions/checkout@v3
      # - name: Test
      #   run: |
      #     xcodebuild -workspace SlimHUD.xcworkspace -scheme SlimHUD -destination platform=macOS -resultBundlePath TestResults test
      # - name: Create coverage
      #   id: code-coverage
      #   uses: kishikawakatsumi/xcresulttool@v1
      #   with:
      #     path: TestResults.xcresult
      #     show-code-coverage: true
  write-comment:
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - name: Test output
        run: echo ${{ steps.vars.outputs.file-content }}
      - uses: NejcZdovc/comment-pr@v2
        with:
          file: ${{ UNITTESTCOVERAGE }}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  # get-coverage-result:
  #   runs-on: ubuntu-latest
  #   # needs: analyze
  #   steps:
  #     - uses: actions/github-script@v6
  #       id: get-run
  #       with:
  #         script: |
  #           const artifacts = await github.rest.checks.get({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             check_run_id: github.run_id,
  #           });
  #           return artifacts.data
  #     - name: Get result
  #       run: echo "${{ steps.get-run.outputs.result }}"