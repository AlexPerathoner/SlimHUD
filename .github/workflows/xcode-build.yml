name: Build and Analyze
on:
  push:
    branches: ["master", "develop"]
  pull_request:
    branches: ["master", "develop"]

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  analyze:
    runs-on: macos-12
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Test
        run: |
          xcodebuild -workspace SlimHUD.xcworkspace -scheme SlimHUD -destination platform=macOS -resultBundlePath TestResults test

      - name: Public test results
        uses: kishikawakatsumi/xcresulttool@v1.7.0
        if: success() || failure()
        with:
          path: "TestResults.xcresult"
          title: Coverage results
          upload-bundles: always
          show-code-coverage: true

  create-comment:
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - uses: actions/github-script@v6
        id: get-run
        with:
          result-encoding: string
          script: |
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{github.run_id}},
            });
            const summary_url = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            const coverage_result_check_id = jobs.data.jobs.filter(a => a.name == "Coverage results")[0].id
            if(coverage_result_check_id != null) {
              const check_run = await github.rest.checks.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                check_run_id: coverage_result_check_id
              });
              const output = check_run.data.output
              const summary = output.summary
              const text = output.text
              return summary + "<br>---<br>" + text
            } else {
              return 'Coverage: [here](' + summary_url + ')'
            }
      - uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          message: ${{ steps.get-run.outputs.result }}

