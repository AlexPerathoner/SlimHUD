name: Build and Analyze
on:
  pull_request:
    branches: ["master", "develop"]
  workflow_dispatch:

concurrency:
  group: "unitests${{ github.head_ref || github.run_id }}"
  cancel-in-progress: true

env:
  test-results-check-name: Unit Test results

jobs:
  unit-tests-run:
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Switch Xcode version
        run: sudo xcode-select -s "/Applications/Xcode_14.2.app"
      - name: Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Build and Test
        continue-on-error: true
        run: |
          xcodebuild clean test \
          -project SlimHUD.xcodeproj \
          -scheme SlimHUD-GitHub-Action \
          -destination platform=macOS \
          -resultBundlePath TestResults \
          -test-iterations 3 -retry-tests-on-failure \
          CODE_SIGNING_ALLOWED=NO
      - name: Post test results
        uses: kishikawakatsumi/xcresulttool@v1
        if: success() || failure()
        with:
          path: "TestResults.xcresult"
          title: ${{ env.test-results-check-name }}
          upload-bundles: never
          show-code-coverage: true
          
  wait-for-results-creation:
    runs-on: ubuntu-latest
    needs: unit-tests-run
    if: github.event_name == 'pull_request'
    steps:
      - name: Wait 7 seconds
        run: sleep 7

  create-comment-unit-tests-with-coverage:
    runs-on: ubuntu-latest
    needs: wait-for-results-creation
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v6
        id: get-run
        with:
          result-encoding: string
          script: |
            
            const workflows = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const summary_url = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            const workflow_ids = workflows.data.workflow_runs.map(a => a.id)
            let coverage_result_check_id = 0
            for (const id in workflow_ids) {
              const jobs = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{github.run_id}},
              });
              const coverage_result_check = jobs.data.jobs.filter(a => a.name == "${{ env.test-results-check-name }}")[0]
              if(coverage_result_check != null) {
                coverage_result_check_id = coverage_result_check.id
                break
              }
            }
            if(coverage_result_check_id != 0) {
              const check_run = await github.rest.checks.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                check_run_id: coverage_result_check_id
              });
              const output = check_run.data.output
              const summary = output.summary
              const details = output.text
              return summary + "\n---\n\n" + details
            } else {
              return 'Coverage: [here](' + summary_url + ')'
            }
      - uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          header: tests
          recreate: true
          message: ${{ steps.get-run.outputs.result }}
