name: Build and Analyze
on:
  push:
    branches: ["master", "develop"]
  pull_request:
    branches: ["master", "develop"]

concurrency:
# check if this works
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  analyze:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test
        run: |
          xcodebuild -workspace SlimHUD.xcworkspace -scheme SlimHUD -destination platform=macOS -resultBundlePath TestResults test
      - name: Create coverage
        id: code-coverage
        uses: kishikawakatsumi/xcresulttool@v1
        with:
          path: TestResults.xcresult
          show-code-coverage: true
  write-comment:
    runs-on: ubuntu-latest
      - name: Get Current Job Log URL
        uses: Tiryoh/gha-jobid-action@v0
        id: jobs
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          job_name: "analyze"
          per_page: 1
      - name: Output Current Job Log URL
        run: echo ${{ steps.jobs.outputs.job_id }}
      - uses: actions/github-script@v6
        id: get-run
        with:
          script: |
            const artifacts = await github.rest.checks.listAnnotations({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.jobs.outputs.job_id }},
            });
            return artifacts.data
      - name: Get result
        run: echo "${{ steps.get-run.outputs.result }}"
  # get-coverage-result:
  #   runs-on: ubuntu-latest
  #   # needs: analyze
  #   steps:
  #     - uses: actions/github-script@v6
  #       id: get-run
  #       with:
  #         script: |
  #           const artifacts = await github.rest.checks.get({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             check_run_id: github.run_id,
  #           });
  #           return artifacts.data
  #     - name: Get result
  #       run: echo "${{ steps.get-run.outputs.result }}"