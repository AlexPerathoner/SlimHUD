name: "Create Release"
on:
  issue_comment:
    types: [created]

concurrency:
  group: publish-release${{ github.ref }}
  cancel-in-progress: true

env:
  projname: SlimHUD

jobs:
  release:
    name: "Create Release"
    runs-on: macos-12
    environment: sparkle-release
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/release') && github.event.comment.user.login == "${{ github.repository_owner }}"
    steps:
      - name: Add reactions # adding reactions to the comment to show that the action is running
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: eyes
      - uses: actions/github-script@v6 # check if the PR is ready to be merged
        id: get-run
        with:
          result-encoding: string
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            if (pr.data.draft || !pr.data.mergeable) {
              core.setFailed("PR is not ready to be merged");
            }
      - uses: xt0rted/pull-request-comment-branch@v1 # check out branch of PR
        id: comment-branch
      - uses: actions/checkout@v3
        if: success()
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}
      - name: Extract latest changes # generate release notes, version and title to use in the release
        id: latest_changes
        run: |
          python3 ./Configuration/generate_latest_changes.py
          echo "new_version=$(cat new_version)" >> $GITHUB_OUTPUT
          echo "old_version=$(cat new_version)" >> $GITHUB_OUTPUT
          echo "title=$(cat title)" >> $GITHUB_OUTPUT
      - name: Check if version already released # prevent releasing the same version twice
        run: |
          if [[ $(xcrun agvtool what-version -terse) == $(cat new_version) ]]; then
            echo "Version already released" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      - name: Check if release notes are empty # prevent releasing without release notes
        run: |
          if [[ $(cat latest_changes) == "" ]]; then
            echo "Release notes are empty" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      - name: Override versions in project # set new version in project
        run: |
          sed -i '' "s/_VERSION = $(xcrun agvtool what-version -terse)/_VERSION = ${{ steps.latest_changes.outputs.new_version }}/g" ${{ env.projname }}.xcodeproj/project.pbxproj;
      - name: Install the Apple certificate and provisioning profile
          # install the Apple certificate and provisioning profile
          # following https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Switch Xcode version # Force Xcode version (macOS runner has multiple Xcode versions installed)
        run: |
          sudo xcode-select -s "/Applications/Xcode_14.2.app"
          /usr/bin/xcodebuild -version
      - name: Build and archive # create archive
        run: xcodebuild clean archive -project ${{ env.projname }}.xcodeproj -scheme ${{ env.projname }} -archivePath ${{ env.projname }}
      - name: Export app # create .app
        run: xcodebuild -exportArchive -archivePath "${{ env.projname }}.xcarchive" -exportPath Release -exportOptionsPlist "Configuration/export_options.plist"
      - name: Zip app # zip .app
        run: |
          cd Release
          ditto -c -k --sequesterRsrc --keepParent ${{ env.projname }}.app ${{ env.projname }}.zip
          cd ..
      - name: Prepare Sparkle update creation # Import Sparkle private key, remove unnecessary files in Release folder
        env:
          PRIVATE_SPARKLE_KEY: ${{ secrets.PRIVATE_SPARKLE_KEY }}
        run: |
          echo -n "$PRIVATE_SPARKLE_KEY" > ./Configuration/sparkle_private_key
          rm -rf Release/*.app
          rm -rf Release/*.log
          rm -rf Release/*.plist
      - name: Generate Sparkle notes # generate Sparkle release notes (convert Markdown to HTML)
        run: |
          pip3 install -r Configuration/requirements.txt
          python3 ./Configuration/generate_html_for_sparkle_release.py
          mv Release/latest_changes.html Release/${{ env.projname }}.html
      - name: Update appcast # generate / update appcast.xml with edDSA key
        run: |
          ./Configuration/generate_appcast \
              --ed-key-file Configuration/sparkle_private_key \
              --link https://github.com/AlexPerathoner/${{ github.event.repository.name }}/releases \
              --download-url-prefix https://github.com/AlexPerathoner/${{ github.event.repository.name }}/releases/download/v${{ steps.latest_changes.outputs.new_version }}/ \
              -o docs/Support/appcast.xml \
              Release/
      - name: Create GitHub release # Upload .zip to GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.latest_changes.outputs.title }}
          tag_name: v${{ steps.latest_changes.outputs.new_version }}
          fail_on_unmatched_files: true
          body_path: latest_changes
          files: |
            Release/${{ env.projname }}.zip
      - name: Cleanup # remove all build files, keys, etc.
        run: |
          rm -rf Release
          rm -rf ${{ env.projname }}.xcarchive
          rm -rf ${{ env.projname }}.zip
          rm -rf latest_changes
          rm -rf new_version
          rm -rf old_version
          rm -rf title
          rm -rf Configuration/sparkle_private_key
      - name: Saving changes # commits changes to branch (version bump, appcast.xml)
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update version to v${{ steps.latest_changes.outputs.new_version }}"
      - name: Create summary # create summary for PR
        run: |
          echo "Release v${{ steps.latest_changes.outputs.new_version }} created" >> $GITHUB_STEP_SUMMARY
      - uses: xt0rted/pull-request-comment-branch@v1 # checkout again, because the previous checkout is detached
        id: comment-branch-2
      - uses: actions/checkout@v3
        if: success()
        with:
          ref: ${{ steps.comment-branch-2.outputs.head_ref }}
      - name: Merge PR # merge PR
        uses: "pascalgn/automerge-action@v0.15.5"
        env:
          MERGE_LABELS: "" # no labels necessary for the PR to be merged
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_COMMIT_MESSAGE: "Release version v${{ steps.latest_changes.outputs.new_version }}"
          MERGE_FILTER_AUTHOR: "${{ github.repository_owner }}"
          MERGE_ERROR_FAIL: true
      - name: Add success reactions # Adding reactions to comment depending on result
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: rocket
      - name: Add negative reaction
        if: failure()
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: confused

